import cv2
import numpy as np
import time
import pygame
import os
from datetime import datetime
import csv

# Init pygame - just using for alarm sounds
pygame.mixer.init()

# Sound paths (set to my personal directory - adjust if needed)
SOUND_DIR = r"D:\MY works\MY_IDEAS\Drowsiness Detection"
LOW_ALERT = os.path.join(SOUND_DIR, 'low_alert.wav')
MED_ALERT = os.path.join(SOUND_DIR, 'med_alert.wav')
HIGH_ALERT = os.path.join(SOUND_DIR, 'high_alert.wav')

# Where we'll dump the logs
LOG_DIR = os.path.join(SOUND_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)  # Making sure logs folder exists

# Drowsiness detection thresholds (can tweak later)
EYE_AR_CONSEC_FRAMES_LOW = 15
EYE_AR_CONSEC_FRAMES_MED = 30
EYE_AR_CONSEC_FRAMES_HIGH = 45

# Tilt detection / distraction settings
HEAD_TILT_THRESHOLD = 15
DISTRACTION_FRAMES = 50

# Calibration phase stuff
CALIBRATION_FRAMES = 100
calibration_counter = 0
calibration_done = False
normal_blink_rate = 0  # gets set after calibration

# Tracking state
frame_counter = 0
alert_status = 0
look_away_counter = 0
blink_count = 0
last_blink_time = time.time()
blink_rate = 0

# Open log file
log_file_path = os.path.join(LOG_DIR, f"drowsiness_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv")
with open(log_file_path, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(["Timestamp", "Alert_Level", "Eyes_Detected", "Blink_Rate", "Head_Position", "Distraction_Level"])

# Load Haar cascades (OpenCV classic way)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye_tree_eyeglasses.xml')
profile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_profileface.xml')

def play_alert_sound(level):
    pygame.mixer.music.stop()
    if level == 1 and os.path.exists(LOW_ALERT):
        pygame.mixer.music.load(LOW_ALERT)
        pygame.mixer.music.play()
    elif level == 2 and os.path.exists(MED_ALERT):
        pygame.mixer.music.load(MED_ALERT)
        pygame.mixer.music.play()
    elif level == 3 and os.path.exists(HIGH_ALERT):
        pygame.mixer.music.load(HIGH_ALERT)
        pygame.mixer.music.play(-1)  # loop it
    else:
        print("[!] Alert sound file missing for level:", level)

def say_alert(level):
    msgs = {
        1: "Hey, you're looking a bit tired.",
        2: "Wake up call! Eyes on the road!",
        3: "THIS IS DANGEROUS! PULL OVER!"
    }
    if level in msgs:
        print("[ALERT]", msgs[level])

def log_event(alert_level, eyes, blink_rate, head_pos, distraction):
    with open(log_file_path, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().strftime('%Y-%m-%d %H:%M:%S'), alert_level, eyes, blink_rate, head_pos, distraction])

print("\n[System] Driver Drowsiness Monitor is firing up...")
print(f"[Info] Sound directory: {SOUND_DIR}")

# Open camera
cap = cv2.VideoCapture(0)
start_time = time.time()
prev_frame_time = 0

font = cv2.FONT_HERSHEY_SIMPLEX
colors = {
    'green': (0, 255, 0),
    'yellow': (0, 255, 255),
    'orange': (0, 165, 255),
    'red': (0, 0, 255),
    'white': (255, 255, 255),
    'blue': (255, 0, 0)
}

while True:
    ret, frame = cap.read()
    if not ret:
        print("[Error] Couldn't read from camera")
        break

    current_time = time.time()
    fps = 1 / (current_time - prev_frame_time) if prev_frame_time > 0 else 0
    prev_frame_time = current_time

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    profiles = profile_cascade.detectMultiScale(gray, 1.3, 5)

    # Interface panel
    cv2.rectangle(frame, (10, 10), (310, 150), (0, 0, 0), -1)
    cv2.putText(frame, f"FPS: {fps:.1f}", (20, 35), font, 0.6, colors['white'], 1)

    # Determine lighting condition
    brightness_avg = np.mean(gray)
    light_mode = "Night Mode" if brightness_avg < 100 else "Day Mode"
    cv2.putText(frame, light_mode, (20, 140), font, 0.6, colors['blue'], 1)

    elapsed = int(current_time - start_time)
    m, s = divmod(elapsed, 60)
    cv2.putText(frame, f"Time: {m:02d}:{s:02d}", (180, 35), font, 0.6, colors['white'], 1)

    if len(faces) == 0 and len(profiles) == 0:
        cv2.putText(frame, "No face detected", (20, 65), font, 0.6, colors['yellow'], 2)
        frame_counter = max(0, frame_counter - 1)
        if frame_counter == 0:
            alert_status = 0
            pygame.mixer.music.stop()
        cv2.imshow("Drowsiness Monitor", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        continue

    faces_all = list(faces) + list(profiles)
    head_pos = "Forward" if len(faces) > 0 else "Away"

    if head_pos == "Away":
        look_away_counter += 1
    else:
        look_away_counter = max(0, look_away_counter - 2)

    distraction_pct = min(100, int(look_away_counter / DISTRACTION_FRAMES * 100))
    cv2.putText(frame, f"Distraction: {distraction_pct}%", (180, 65), font, 0.6,
                colors['yellow'] if distraction_pct > 50 else colors['white'], 1)

    (x, y, w, h) = faces_all[0]
    cv2.rectangle(frame, (x, y), (x + w, y + h), colors['green'], 2)
    roi_gray = gray[y:y + h // 2, x:x + w]
    roi_color = frame[y:y + h // 2, x:x + w]
    eyes = eye_cascade.detectMultiScale(roi_gray, 1.1, 3, minSize=(20, 20))

    cv2.putText(frame, f"Eyes detected: {len(eyes)}", (20, 65), font, 0.6, colors['white'], 1)

    if not calibration_done:
        if len(eyes) == 2:
            calibration_counter += 1
            cv2.putText(frame, f"Calibrating: {calibration_counter}/{CALIBRATION_FRAMES}",
                        (20, 170), font, 0.7, colors['green'], 2)
            if calibration_counter >= CALIBRATION_FRAMES:
                normal_blink_rate = blink_count / (time.time() - start_time) * 60
                calibration_done = True
                print(f"[Calibrated] Normal blink rate set: {normal_blink_rate:.1f} blinks/min")
        cv2.imshow("Drowsiness Monitor", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        continue

    if 0 < len(eyes) < 2:
        frame_counter += 1
    else:
        if 3 <= frame_counter <= 7:
            blink_count += 1
            blink_rate = blink_count / (time.time() - start_time) * 60
            last_blink_time = time.time()
        frame_counter = 0

    cv2.putText(frame, f"Blink rate: {blink_rate:.1f}/min", (20, 95), font, 0.6, colors['white'], 1)

    if len(eyes) < 2:
        frame_counter += 1
        cv2.putText(frame, f"Eyes closed: {frame_counter} frames", (20, 117), font, 0.6, colors['orange'], 1)
    else:
        frame_counter = max(0, frame_counter - 2)
        cv2.putText(frame, "Eyes open", (20, 117), font, 0.6, colors['green'], 1)

    adj_factor = 0.7 if light_mode == "Night Mode" else 1.0
    low, med, high = [int(thresh * adj_factor) for thresh in
                      [EYE_AR_CONSEC_FRAMES_LOW, EYE_AR_CONSEC_FRAMES_MED, EYE_AR_CONSEC_FRAMES_HIGH]]

    prev_level = alert_status
    if frame_counter >= high:
        alert_status = 3
    elif frame_counter >= med:
        alert_status = 2
    elif frame_counter >= low:
        alert_status = 1
    else:
        alert_status = 0

    if calibration_done and blink_rate < normal_blink_rate * 0.6:
        alert_status = max(alert_status, 1)

    if alert_status != prev_level:
        play_alert_sound(alert_status)
        say_alert(alert_status)

    for (ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), colors['green'], 2)

    if int(time.time()) % 5 == 0:
        log_event(alert_status, len(eyes), blink_rate, head_pos, distraction_pct)

    if alert_status == 1:
        cv2.putText(frame, "DROWSINESS WARNING", (frame.shape[1] // 2 - 150, 30), font, 0.8, colors['yellow'], 2)
    elif alert_status == 2:
        cv2.putText(frame, "DROWSINESS ALERT!", (frame.shape[1] // 2 - 140, 30), font, 0.9, colors['orange'], 2)
    elif alert_status == 3:
        if int(time.time() * 2) % 2 == 0:
            cv2.putText(frame, "WAKE UP! DANGER!", (frame.shape[1] // 2 - 180, 40), font, 1.2, colors['red'], 3)
            red_overlay = frame.copy()
            cv2.rectangle(red_overlay, (0, 0), (frame.shape[1], frame.shape[0]), colors['red'], -1)
            frame = cv2.addWeighted(red_overlay, 0.2, frame, 0.8, 0)

    cv2.imshow("Drowsiness Monitor", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
pygame.mixer.music.stop()
pygame.quit()
print(f"[Session Ended] Log file written to: {log_file_path}")
